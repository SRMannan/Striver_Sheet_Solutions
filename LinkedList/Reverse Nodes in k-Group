/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reversal(ListNode* head)
    {
        ListNode* temp = head;
        ListNode* prev = NULL;
        ListNode* front = temp->next;
        while(temp)
        {
                front = temp->next;
                temp->next = prev;
                prev = temp;
                temp = front;
        }
        return prev;

    }

    ListNode* getKthNode (ListNode* head , int k)
    {
        k--;
        ListNode* temp = head;
        while(temp != NULL && k > 0)            k-- , temp = temp -> next; 
        return temp;
    }

    ListNode* reverseKGroup(ListNode* head, int k) 
    {
            ListNode* temp = head;
            ListNode* prevptr = nullptr;
            ListNode* nextptr = temp->next;

            while(temp)
            {
                ListNode* kthNode = getKthNode(temp , k);

                if(kthNode == nullptr)
                {
                    prevptr -> next = nextptr;
                    break;
                }

                nextptr = kthNode->next;
                kthNode->next = nullptr;

                ListNode* ptr = reversal(temp);

                if(temp == head)            head = ptr;
                else                        prevptr->next = ptr;

                prevptr = temp , temp = nextptr;
            }

            return head;

    }
};